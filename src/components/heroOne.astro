---
//@ts-nocheck
import Image from "astro/components/Image.astro";
import Button from "./button.astro";
import Card from "./card.astro";

import HeroImg from "../assets/images/heroimg.png";

const cards = [
  {
    title: "Finance & Restructuring",
    description: "Get help from Alex Moore, a professional business coach with advanced experience on growth and business scaling.",
    button: {
      label: "Our Services",
      url: "#",
    },
  },
  {
    title: "Our Approach",
    description: "Get help from Alex Moore, a professional business coach with advanced experience on growth and business scaling.",
    button: {
      label: "More About",
      url: "about",
    },
  },
  {
    title: "Consultalk Result",
    icon: "",
    description: "Get help from Alex Moore, a professional business coach with advanced experience on growth and business scaling.",
    button: {
      label: "Explore Our Solution",
      url: "casestudy",
    },
  },
];
---

<section class="full-bleed" data-theme="dark">
  <article class="full-bleed">
    <header class="flow-space">
      <h1 class="heading-1">Adam Buschemia Business Consultant</h1>
      <p>Get help from Alex Moore, a professional business coach with advanced experience on growth and business scaling.</p>
      <Button label="Book a Meeting" variant="primary" />
    </header>
    <figure>
      <Image src={HeroImg} alt="" />
    </figure>
  </article>
  <div class="container">
    <ul role="list" class="hero">
      {
        cards.map((card) => {
          return (
            <li>
              <Card data={card} />
            </li>
          );
        })
      }
    </ul>
  </div>
</section>

<style>
  section {
    padding: 0;
    background: transparent;
    > article {
      background: var(--clr-section-bg);
      display: grid;
      grid-template-columns: var(--margin-width) repeat(2, minmax(0, calc(75rem / 2))) var(--margin-width);
      grid-row: 1 / 4;

      header {
        position: relative;
        grid-column: 2;
        grid-row: 1 / 3;
        padding: var(--space-xl) 0;

        &::before {
          --square-count: 12;
          --square-size: 1.34rem;

          --_square-size: var(--square-size, 1rem);
          --_square-half: calc(var(--square-size) / 2);
          --_square-sum: calc(var(--square-count) * var(--square-size));
          content: "";
          position: absolute;
          inset: 50% auto auto -10%;
          transform: translateX(-100%) translateY(-50%);
          inline-size: calc(round(var(--_square-sum), var(--_square-size)) - var(--_square-half));
          aspect-ratio: 1;
          background: linear-gradient(135deg, #be965d, #976f40, #c99b61, #f0be7b, #ffcb85, #eebc79, #c0935b, #976f40) 0 0 / 100% 100%;
          mask:
            var(--square-pattern) 0 0 / var(--_square-size) var(--_square-size),
            var(--square-pattern) var(--_square-half) var(--_square-half) / var(--_square-size) var(--_square-size);
        }
        &::after {
          --square-count: 4;
          --square-size: 1rem;

          --_square-size: var(--square-size, 1rem);
          --_square-half: calc(var(--square-size) / 2);
          --_square-sum: calc(var(--square-count) * var(--square-size));
          content: "";
          position: absolute;
          inset: 0 0 auto auto;
          inline-size: calc(round(var(--_square-sum), var(--_square-size)) - var(--_square-half));
          aspect-ratio: 1 / 1.5;
          background: linear-gradient(135deg, #be965d, #976f40, #c99b61, #f0be7b, #ffcb85, #eebc79, #c0935b, #976f40) 0 0 / 100% 100%;
          mask:
            var(--square-pattern) 0 0 / var(--_square-size) var(--_square-size),
            var(--square-pattern) var(--_square-half) var(--_square-half) / var(--_square-size) var(--_square-size);
        }

        @media (width < 400px) {
          > p {
            display: none;
          }
        }
      }

      figure {
        grid-column: 3 / 4 span;
        grid-row: 1 / 2 span;
        img {
          width: 50svw;
          height: 38rem;
          object-fit: cover;
        }
      }
    }

    .container {
      container: scroller / inline-size;
      grid-column: main;
      grid-row: 3 / 5;
      ul {
        display: flex;
        gap: var(--space-xs);

        @container scroller (width < 800px) {
          overflow-x: scroll;
          scroll-snap-type: x mandatory;
          -ms-overflow-style: none; /* for Internet Explorer, Edge */
          scrollbar-width: none; /* for Firefox */
          &::-webkit-scrollbar {
            display: none; /* for Chrome, Safari, and Opera */
          }
          > li {
            flex: 1 0 100%;
            scroll-snap-align: center;
          }
        }
      }
    }
  }
</style>
